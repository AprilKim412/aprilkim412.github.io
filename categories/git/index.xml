<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on April's DevLog</title><link>https://aprilslab.github.io/categories/git/</link><description>Recent content in Git on April's DevLog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Tue, 12 Jul 2022 05:29:08 +0000</lastBuildDate><atom:link href="https://aprilslab.github.io/categories/git/index.xml" rel="self" type="application/rss+xml"/><item><title>[기본] Git 명령어 (status, add, commit)</title><link>https://aprilslab.github.io/posts/git/02/</link><pubDate>Tue, 12 Jul 2022 05:29:08 +0000</pubDate><guid>https://aprilslab.github.io/posts/git/02/</guid><description>Git 에서 버전관리하기 git에서는 commit단위로 버전 관리를 할 수 있습니다.
commit에 메세지를 남겨 무슨 변경 사항이 있었는지 내역을 남길 수 있고
SourceTree등의 툴을 이용해서 브랜치 모습을 확인할 수도 있습니다.
SourceTree를 설치하지 않았더라도 gitk명령어를 통해서 브랜치의 모습을 확인할 수도 있습니다.
gitk 스테이지(stage)와 커밋(commit) 스테이지
스테이지는 커밋전 파일이 대기하는 곳입니다. git status 명령을 통해 변경된 파일 목록과 stage된 파일 목록을 확인할 수 있습니다. git add 명령을 통해 스테이지로 파일을 넘길 수 있습니다. 커밋</description></item><item><title>[기본] Git 저장소 생성</title><link>https://aprilslab.github.io/posts/git/01/</link><pubDate>Wed, 25 May 2022 07:04:07 +0900</pubDate><guid>https://aprilslab.github.io/posts/git/01/</guid><description>Git 저장소 생성 방법 Git 분산형 버전관리 시스템입니다.
중앙 집중형 버전 관리 시스템과 달리 모든 클라이언트가 저장소가 될 수 있다는 뜻이죠.
그래서 Git 저장소를 생성하는 방법은 두가지라고 볼 수 있습니다.
로컬에서 생성후 remote 저장소로 push한다. Github이나 Gitlab 등의 remote 저장소에서 생성 후 clone한다. 어떤 방법으로 생성할까? 저장소 생성방법은 remote에서 생성 후 clone 받는 것이 더 간단하다고 생각합니다.
그러나 이미 작업하던 소스코드가 로컬에 존재하는 경우 로컬에서 생성하고 remote로 푸시를 해야겠죠.
graph LR; A(생성 방법) --> B{이미 작업하던 소스가 있다} B -->|Yes| C[로컬에서 생성] B -->|No| D[Remote에서 생성] 오늘은 두가지 방법을 모두 해볼 것 입니다.</description></item><item><title>Git이란?</title><link>https://aprilslab.github.io/posts/git/00/</link><pubDate>Fri, 20 May 2022 12:15:30 +0900</pubDate><guid>https://aprilslab.github.io/posts/git/00/</guid><description>Git 이란 무엇일까? 리수스 토르발스가 만든 분산형 버전 관리 시스템입니다.
분산형
각 개발자가 중앙 서버에 접속하지 않은 상태에서도 코드 작업을 할 수 있습니다. 중앙 집중형 버전 관리 시스템의 저장소가 서버에만 있는 것과 달리 분산형 버전 관리 시스템은 모든 클라이언트가 저장소가 될 수 있습니다. 모든 클라이언트가 저장소가 될 수 있기 때문에 오프라인 작업이 가능합니다. (git은 저장소를 일단 로컬에 복제하고 로컬에 있는 히스토리를 그대로 유지하기 때문에 서버와 연결이 되지 않은 상태에서도 작업을 진행할 수 있습니다.</description></item></channel></rss>