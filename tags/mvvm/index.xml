<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MVVM on April's DevLog</title><link>https://aprilslab.github.io/tags/mvvm/</link><description>Recent content in MVVM on April's DevLog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Fri, 19 Aug 2022 01:18:46 +0000</lastBuildDate><atom:link href="https://aprilslab.github.io/tags/mvvm/index.xml" rel="self" type="application/rss+xml"/><item><title>MVVM 패턴</title><link>https://aprilslab.github.io/posts/etc/00/</link><pubDate>Fri, 19 Aug 2022 01:18:46 +0000</pubDate><guid>https://aprilslab.github.io/posts/etc/00/</guid><description>서론
요새 많이 쓰이는 MVVM 패턴에 대해서 설명할 수 있게 정리해보는 시간을 갖도록 해보겠습니다.
개념 위키피디아 정의를 보면 MVVM 은 View와 비즈니스 로직(back-end 로직)을 분리하기 쉽게하여 뷰가 Model의 특정 플랫폼에 위존하지 않게하는 아키텍처 패턴입니다. View Model은 Value Converter의 역할을 하는데 Data를 조작하거나 보여주기 쉽게 만드는 역할을 합니다.
Command 패턴과 Data Binding을 사용하여 구현합니다.
graph LR; View ---|Data Binding| ViewModel ViewModel --> Model Model --> ViewModel MVVM 패턴의 요소 Model Model은 콘텐츠를 나타내는 Domain Model(객체지향 접근 방식) 또는 데이터 접근 계층(데이터 중심 접근 방식)을 나타냅니다.</description></item></channel></rss>